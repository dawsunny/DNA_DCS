!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AR	compress/Makefile	/^AR = ar rvs$/;"	m
AR	decompress/Makefile	/^AR = ar rvs$/;"	m
BIN_DIR	compress/Makefile	/^BIN_DIR := $(LDDINC)\/..\/..\/bin\/$/;"	m
BIN_DIR	decompress/Makefile	/^BIN_DIR := $(LDDINC)\/..\/..\/bin\/$/;"	m
CC	compress/Makefile	/^CC = cc$/;"	m
CC	decompress/Makefile	/^CC = g++$/;"	m
CHECK_IDENT_THRESH	include/dc_const.h	14;"	d
CP	compress/Makefile	/^CP = cp$/;"	m
CP	decompress/Makefile	/^CP = cp$/;"	m
DC_ERROR	include/dc_debug.h	11;"	d
DC_PRINT	include/dc_debug.h	25;"	d
DC_PRINT	include/dc_debug.h	50;"	d
DIF_RATE	compress/dc_c_io.c	/^int DIF_RATE;$/;"	v
DIF_RATE	decompress/dc_d_io.c	/^int DIF_RATE;$/;"	v
EXE_FILES	compress/Makefile	/^EXE_FILES = dc_compress$/;"	m
EXE_FILES	decompress/Makefile	/^EXE_FILES = dc_decompress$/;"	m
FILE_PATH_LEN	include/dc_const.h	28;"	d
INC_CLI	compress/Makefile	/^INC_CLI 	 := $(LDDINC)$/;"	m
INC_CLI	decompress/Makefile	/^INC_CLI 	 := $(LDDINC)$/;"	m
INC_PUB	compress/Makefile	/^INC_PUB 	 := $(LDDINC)\/..\/include$/;"	m
INC_PUB	decompress/Makefile	/^INC_PUB 	 := $(LDDINC)\/..\/include$/;"	m
INPUT_CHUNK	include/dc_const.h	6;"	d
LDDINC	compress/Makefile	/^LDDINC 		 := $(shell pwd)$/;"	m
LDDINC	decompress/Makefile	/^LDDINC 		 := $(shell pwd)$/;"	m
LDFLAGS	compress/Makefile	/^LDFLAGS = -lpthread$/;"	m
LINE_BUF_LEN	include/dc_const.h	29;"	d
LINE_LEN	decompress/dc_d_io.c	/^int LINE_LEN;$/;"	v
MAX_CHECK_DIST	include/dc_const.h	13;"	d
MAX_CONSEC_MISMATCH	include/dc_const.h	12;"	d
MAX_DP_LEN	compress/dc_c_io.c	/^int MAX_DP_LEN;$/;"	v
MAX_SEED_FREQ	include/dc_const.h	21;"	d
MEGA	include/dc_const.h	22;"	d
MIN	include/dc_const.h	32;"	d
MIN_DP_LEN	include/dc_const.h	16;"	d
MIN_PROGRESS	include/dc_const.h	11;"	d
MV	compress/Makefile	/^MV = mv -f$/;"	m
MV	decompress/Makefile	/^MV = mv -f$/;"	m
OBJS	compress/Makefile	/^OBJS =	dc_c_main.o	\\$/;"	m
OBJS	decompress/Makefile	/^OBJS =	dc_d_main.o	\\$/;"	m
OVERLAP	compress/dc_c_io.c	/^int OVERLAP;$/;"	v
OVERLAP	decompress/dc_d_io.c	/^int OVERLAP;$/;"	v
REF_CHUNK	include/dc_const.h	5;"	d
RM	compress/Makefile	/^RM = rm -f$/;"	m
RM	decompress/Makefile	/^RM = rm -f$/;"	m
SAMPLE_RATE	include/dc_const.h	19;"	d
SEED_LEN	include/dc_const.h	20;"	d
THREAD_NUM	compress/dc_c_io.c	/^int THREAD_NUM;$/;"	v
__DC_CONST_H_	include/dc_const.h	2;"	d
__DC_DEBUG_H_	include/dc_debug.h	2;"	d
__DC_DECODE_H_	decompress/dc_d_decode.h	2;"	d
__DC_DECOMPRESS_H_	decompress/dc_d_decompress.h	2;"	d
__DC_ENCODE_H_	compress/dc_c_encode.h	2;"	d
__DC_EXT_H_	compress/dc_c_alignment.h	2;"	d
__DC_GLOBAL_H_	compress/dc_c_global.h	2;"	d
__DC_GLOBAL_H_	decompress/dc_d_global.h	2;"	d
__DC_IO_H_	compress/dc_c_io.h	2;"	d
__DC_IO_H_	decompress/dc_d_io.h	2;"	d
__DC_THREAD_H_	compress/dc_c_thread.h	2;"	d
__DC_TYPE_H_	include/dc_type.h	2;"	d
__DEBUG_ON_	include/dc_debug.h	9;"	d
analyze_path	decompress/dc_d_decompress.c	/^analyze_path(dc_s8_t *input_path)$/;"	f
attempt_ext	compress/dc_c_alignment.c	/^attempt_ext(dc_s32_t *idxp0, dc_s32_t dir0, const dc_s8_t *s0,  dc_s32_t len0,$/;"	f
base_to_uint	compress/dc_c_encode.c	/^base_to_uint(dc_s8_t base)$/;"	f
char_to_halfByte	compress/dc_c_encode.c	/^char_to_halfByte(dc_s8_t ch) $/;"	f
check_arg	compress/dc_c_io.c	/^check_arg( dc_s32_t argc, dc_s8_t *argv[] )$/;"	f
check_arg	decompress/dc_d_io.c	/^check_arg( dc_s32_t argc, dc_s8_t *argv[] )$/;"	f
compress_input_file	compress/dc_c_alignment.c	/^compress_input_file(dc_s8_t *input_path, dc_s8_t *output_name)$/;"	f
dc_link	compress/dc_c_io.h	/^struct dc_link$/;"	s
dc_link	decompress/dc_d_decompress.h	/^struct dc_link $/;"	s
dc_link_t	compress/dc_c_io.h	/^typedef struct dc_link dc_link_t;$/;"	t	typeref:struct:dc_link
dc_link_t	decompress/dc_d_decompress.h	/^typedef struct dc_link dc_link_t;$/;"	t	typeref:struct:dc_link
dc_s16_t	include/dc_type.h	/^typedef short          dc_s16_t;$/;"	t
dc_s32_t	include/dc_type.h	/^typedef int            dc_s32_t;$/;"	t
dc_s64_t	include/dc_type.h	/^typedef long           dc_s64_t;$/;"	t
dc_s8_t	include/dc_type.h	/^typedef char           dc_s8_t;$/;"	t
dc_seed_loc	compress/dc_c_io.h	/^struct dc_seed_loc$/;"	s
dc_seed_loc_t	compress/dc_c_io.h	/^typedef struct dc_seed_loc dc_seed_loc_t;$/;"	t	typeref:struct:dc_seed_loc
dc_task	compress/dc_c_thread.h	/^struct dc_task$/;"	s
dc_task_t	compress/dc_c_thread.h	/^typedef struct dc_task dc_task_t;$/;"	t	typeref:struct:dc_task
dc_thread_pool	compress/dc_c_thread.h	/^struct dc_thread_pool$/;"	s
dc_thread_pool_t	compress/dc_c_thread.h	/^typedef struct dc_thread_pool dc_thread_pool_t;$/;"	t	typeref:struct:dc_thread_pool
dc_u16_t	include/dc_type.h	/^typedef unsigned short dc_u16_t;$/;"	t
dc_u32_t	include/dc_type.h	/^typedef unsigned int   dc_u32_t;$/;"	t
dc_u64_t	include/dc_type.h	/^typedef unsigned long  dc_u64_t;$/;"	t
dc_u8_t	include/dc_type.h	/^typedef unsigned char  dc_u8_t;$/;"	t
decompress_file	decompress/dc_d_decompress.c	/^decompress_file(const dc_s8_t *cfile_name, const dc_s8_t *output_name)$/;"	f
find_match	compress/dc_c_alignment.c	/^find_match(dc_s32_t inp_seq_no, dc_s8_t *inp_seq, dc_s32_t inp_seq_len, dc_s32_t *ref_start_gp,$/;"	f
free_memory	compress/dc_c_io.c	/^free_memory()$/;"	f
free_memory	decompress/dc_d_io.c	/^free_memory()$/;"	f
halfByte_to_char	decompress/dc_d_decode.c	/^halfByte_to_char(dc_u8_t ch) $/;"	f
inp_len	compress/dc_c_io.h	/^    dc_s32_t inp_len;$/;"	m	struct:dc_link
inp_len	decompress/dc_d_decompress.h	/^    dc_s32_t inp_len;$/;"	m	struct:dc_link
inp_seq_no	compress/dc_c_io.h	/^    dc_s32_t inp_seq_no;$/;"	m	struct:dc_link
inp_seq_no	decompress/dc_d_decompress.h	/^    dc_s32_t inp_seq_no;$/;"	m	struct:dc_link
input_path	compress/dc_c_thread.h	/^    dc_s8_t input_path[FILE_PATH_LEN];$/;"	m	struct:dc_task
main	compress/dc_c_main.c	/^main( dc_s32_t argc, dc_s8_t *argv[] )$/;"	f
main	decompress/dc_d_main.c	/^main( dc_s32_t argc, dc_s8_t *argv[] )$/;"	f
make_dstr	compress/dc_c_alignment.c	/^make_dstr(dc_s8_t *dstr, dc_s8_t *aligned_seqs[])$/;"	f
make_orig_seq	decompress/dc_d_decompress.c	/^make_orig_seq(const dc_s8_t *s0, dc_s32_t len0, dc_s8_t *dstr, dc_s32_t dstr_len, dc_s8_t *s1, dc_s32_t len1)$/;"	f
max_seed_freq_g	compress/dc_c_io.c	/^dc_s32_t   max_seed_freq_g;$/;"	v
max_usable_len	compress/dc_c_alignment.c	/^max_usable_len(dc_s32_t i, dc_s32_t dir, dc_s32_t len, dc_s32_t quota)$/;"	f
next	compress/dc_c_thread.h	/^    struct dc_task *next;$/;"	m	struct:dc_task	typeref:struct:dc_task::dc_task
output_name	compress/dc_c_thread.h	/^    dc_s8_t output_name[FILE_PATH_LEN];$/;"	m	struct:dc_task
pool	compress/dc_c_thread.c	/^dc_thread_pool_t pool;$/;"	v
pool_add_task	compress/dc_c_thread.c	/^pool_add_task(dc_s8_t *input_path)$/;"	f
print_time	compress/dc_c_main.c	/^print_time(char *explain, struct timeval start_time, struct timeval end_time)$/;"	f
print_time	decompress/dc_d_main.c	/^print_time(const char *explain, struct timeval start_time, struct timeval end_time)$/;"	f
print_usage	compress/dc_c_io.c	/^print_usage()$/;"	f
print_usage	decompress/dc_d_io.c	/^print_usage()$/;"	f
read_ref_file	compress/dc_c_io.c	/^read_ref_file(dc_s8_t *ref_file_path)$/;"	f
read_ref_file	decompress/dc_d_io.c	/^read_ref_file(dc_s8_t *ref_file_path)$/;"	f
ref_len	compress/dc_c_io.h	/^    dc_s32_t ref_len;$/;"	m	struct:dc_link
ref_len	decompress/dc_d_decompress.h	/^    dc_s32_t ref_len;$/;"	m	struct:dc_link
ref_seq_no	compress/dc_c_io.h	/^    dc_s32_t ref_seq_no;$/;"	m	struct:dc_link
ref_seq_no	compress/dc_c_io.h	/^    dc_s32_t ref_seq_no;$/;"	m	struct:dc_seed_loc
ref_seq_no	decompress/dc_d_decompress.h	/^    dc_s32_t ref_seq_no;$/;"	m	struct:dc_link
ref_seq_total_no_g	compress/dc_c_io.c	/^dc_s32_t   ref_seq_total_no_g;$/;"	v
ref_seq_total_no_g	decompress/dc_d_io.c	/^dc_s32_t   ref_seq_total_no_g;$/;"	v
ref_seqs_g	compress/dc_c_io.c	/^dc_s8_t  **ref_seqs_g;$/;"	v
ref_seqs_g	decompress/dc_d_io.c	/^dc_s8_t	 **ref_seqs_g;$/;"	v
ref_seqs_len_g	compress/dc_c_io.c	/^dc_s32_t  *ref_seqs_len_g;$/;"	v
ref_seqs_len_g	decompress/dc_d_io.c	/^dc_s32_t  *ref_seqs_len_g;$/;"	v
ref_start	compress/dc_c_io.h	/^    dc_s32_t ref_start;$/;"	m	struct:dc_link
ref_start	decompress/dc_d_decompress.h	/^    dc_s32_t ref_start;$/;"	m	struct:dc_link
reverse	compress/dc_c_alignment.c	/^reverse(dc_s8_t *str)$/;"	f
save_seed_loc	compress/dc_c_io.c	/^save_seed_loc()$/;"	f
seed_locs_freq_g	compress/dc_c_io.c	/^dc_s32_t       seed_locs_freq_g[MEGA];$/;"	v
seed_locs_g	compress/dc_c_io.c	/^dc_seed_loc_t *seed_locs_g[MEGA];$/;"	v
seed_stop	compress/dc_c_io.h	/^    dc_s32_t seed_stop;$/;"	m	struct:dc_seed_loc
shutdown	compress/dc_c_thread.h	/^    dc_s32_t shutdown;  \/\/whether destroy the thread pool$/;"	m	struct:dc_thread_pool
std	decompress/dc_d_decompress.c	/^using namespace std;$/;"	v
std	decompress/dc_d_io.c	/^using namespace std;$/;"	v
tar_compressed_files	compress/dc_c_io.c	/^tar_compressed_files()$/;"	f
task_queue_head	compress/dc_c_thread.h	/^    dc_task_t *task_queue_head;$/;"	m	struct:dc_thread_pool
task_queue_lock	compress/dc_c_thread.h	/^    pthread_mutex_t task_queue_lock;$/;"	m	struct:dc_thread_pool
task_queue_ready	compress/dc_c_thread.h	/^    pthread_cond_t  task_queue_ready;$/;"	m	struct:dc_thread_pool
task_queue_size	compress/dc_c_thread.h	/^    dc_s32_t   task_queue_size;$/;"	m	struct:dc_thread_pool
test_ext	compress/dc_c_alignment.c	/^test_ext(dc_s32_t idx0, dc_s32_t dir0, dc_s8_t *s0, dc_s32_t len0,$/;"	f
test_seed	compress/dc_c_alignment.c	/^test_seed(dc_s32_t s0_no, dc_s8_t *s0, dc_s32_t len0, dc_s32_t start0,$/;"	f
thread_id	compress/dc_c_thread.h	/^    pthread_t *thread_id;$/;"	m	struct:dc_thread_pool
thread_pool_destroy	compress/dc_c_thread.c	/^thread_pool_destroy()$/;"	f
thread_pool_init	compress/dc_c_thread.c	/^thread_pool_init()$/;"	f
thread_routine	compress/dc_c_thread.c	/^thread_routine(void *unused_arg)$/;"	f
write_dstr	compress/dc_c_io.c	/^write_dstr(dc_s8_t *dstr, dc_s32_t dstr_len, dc_u8_t *dstr_encode, FILE *fout)   $/;"	f
write_link	compress/dc_c_io.c	/^write_link(dc_s32_t ref_seq_no, dc_s32_t ref_start, dc_s32_t ref_len,$/;"	f
